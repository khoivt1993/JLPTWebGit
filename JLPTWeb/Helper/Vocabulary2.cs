using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using JLPTWeb.Helper;
//
//    var grammar = Grammar.FromJson(jsonString);

namespace JLPTWeb.Helper
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Vocabulary2
    {
        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("found")]
        public bool Found { get; set; }

        [JsonProperty("data")]
        public List<Datum2> Data { get; set; }
    }

    public partial class Datum2
    {
        [JsonProperty("means")]
        public List<Mean2> Means { get; set; }

        [JsonProperty("images")]
        public List<object> Images { get; set; }

        [JsonProperty("phonetic")]
        public string Phonetic { get; set; }

        [JsonProperty("sounds")]
        public List<object> Sounds { get; set; }

        [JsonProperty("mobileId")]
        public long MobileId { get; set; }

        [JsonProperty("_rev")]
        public string Rev { get; set; }

        [JsonProperty("weight")]
        public long Weight { get; set; }

        [JsonProperty("_id")]
        public string Id { get; set; }

        [JsonProperty("label")]
        public Label2 Label { get; set; }

        [JsonProperty("type")]
        public TypeEnum2 Type { get; set; }

        [JsonProperty("lang")]
        public List<Lang2> Lang { get; set; }

        [JsonProperty("word")]
        public string Word { get; set; }

        [JsonProperty("related_words", NullValueHandling = NullValueHandling.Ignore)]
        public RelatedWords2 RelatedWords { get; set; }
    }

    public partial class Mean2
    {
        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public string Field { get; set; }

        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("mean")]
        public string MeanMean { get; set; }

        [JsonProperty("examples")]
        public List<Example2> Examples { get; set; }

        [JsonProperty("example_mean", NullValueHandling = NullValueHandling.Ignore)]
        public string ExampleMean { get; set; }

        [JsonProperty("example", NullValueHandling = NullValueHandling.Ignore)]
        public string Example { get; set; }
    }

    public partial class Example2
    {
        [JsonProperty("content")]
        public string Content { get; set; }

        [JsonProperty("mean")]
        public string Mean { get; set; }

        [JsonProperty("transcription", NullValueHandling = NullValueHandling.Ignore)]
        public string Transcription { get; set; }
    }

    public partial class RelatedWords2
    {
        [JsonProperty("word")]
        public List<string> Word { get; set; }
    }

    public enum Label2 { Empty, JaVi, ViJa };

    public enum Lang2 { Empty, Vi, Ja };

    public enum TypeEnum2 { Word };

    public partial class Vocabulary2
    {
        public static Vocabulary2 FromJson(string json) => JsonConvert.DeserializeObject<Vocabulary2>(json, JLPTWeb.Helper.Converter2.Settings);
    }

    public static class Serialize2
    {
        public static string ToJson(this Vocabulary2 self) => JsonConvert.SerializeObject(self, JLPTWeb.Helper.Converter2.Settings);
    }

    internal static class Converter2
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                LabelConverter2.Singleton,
                LangConverter2.Singleton,
                TypeEnumConverter2.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class LabelConverter2 : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Label2) || t == typeof(Label2?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Label2.Empty;
                case "ja_vi":
                    return Label2.JaVi;
                case "vi_ja":
                    return Label2.ViJa;
            }
            throw new Exception("Cannot unmarshal type Label");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Label2)untypedValue;
            switch (value)
            {
                case Label2.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Label2.JaVi:
                    serializer.Serialize(writer, "ja_vi");
                    return;
            }
            throw new Exception("Cannot marshal type Label");
        }

        public static readonly LabelConverter2 Singleton = new LabelConverter2();
    }

    internal class LangConverter2 : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Lang2) || t == typeof(Lang2?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Lang2.Empty;
                case "vi":
                    return Lang2.Vi;
                case "ja":
                    return Lang2.Ja;
            }
            throw new Exception("Cannot unmarshal type Lang");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Lang2)untypedValue;
            switch (value)
            {
                case Lang2.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Lang2.Vi:
                    serializer.Serialize(writer, "vi");
                    return;
            }
            throw new Exception("Cannot marshal type Lang");
        }

        public static readonly LangConverter2 Singleton = new LangConverter2();
    }

    internal class TypeEnumConverter2 : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "word")
            {
                return TypeEnum.Word;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Word)
            {
                serializer.Serialize(writer, "word");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
